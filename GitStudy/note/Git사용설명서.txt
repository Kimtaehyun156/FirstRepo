

 # Eclipse Git관련 View 
 - Windows -> show view -> Other.. -> Git -> Git Repositories(저장소)

# Git 
 - .git 폴더가 위치한 폴더의 모든 내용을 관리해주는 프로그램 
 - .git 폴더가 위치한 폴더를 Repository 라고 부른다
 - .git 폴더 내부에는 해당 폴더의 현재 상태가 모두 기록되어있다 
 - .git 폴더를 이용하여 언제든지 이전의 상태로 돌아갈 수 있다 (Windows의 복구 기능과 비슷) 
 - 해당 폴더 내부의 무엇인가가 조금이라도 변하면 알아채고 관리한다 
 - Eclipse 에는 Git이 내장되어 있다 
 
 # Github 
	 - Repository는 내 컴퓨터에 저장해놓고 사용할 수도 있고 
	   원격지에 존재하는 컴퓨터에 저장해놓고 필요할때마다 내 컴퓨터로 복사하여 사용할 수도 있다 
	 - 전자를 로컬 Repository라고 하고 후자를 원격 Repository라고 한다 
	 - Github는 원격 Repository를 업로드 해놓을 수 있는 사이트다  = ( 클라우드 같은개념 )
 
 # Github에서 Repository 생성후 작업하는 컴퓨터로 가져오기 
	 1. Github에서 새로운 Repository 생성해줄것같은 버튼 누르기
	 2. 레포지토리 이름정하기 
	 3. Readme.md 와 gitignore 추가하기 ( .gitignore는 사용하는 언어의 탬플릿 고르기 )  
	 4. 라이센스 고르기 ( 내가 만든 이 코드를 가져다가 사용할때 돈을 내야하는지 여부 )
	 5. 생성
	 6. Eclipse에서 clone 으로 가져오기 ( 로컬 레포지토리 -> 원격 레포지토리 ) 
 
 
 # Repository에 Eclipse 프로젝트 관리대상으로 등록하기 
 	1. 새프로젝트 생성 
 	2. 우클릭 -> Team - > ShareProject -> 원하는 Repository 선택 
 

  
 # Commit 
 	 - 레포지토리 내의 변경 사항을 저장하는 명령어 
 	 - Git은 언제든지 레포지토리 내의 상태를 commit 했었을 떄의 시점으로 돌릴 수 있다 
  	(스냅샷을 찍는다 ) 
  	-checkout을 통해 원하는 commit으로 HEAD를 계속 옮겨다닐 수 있다 
  	(HEAD는 현재 git이 보여주고 있는 상태를 말한다 )
 
 # .gitignore 
 	
 	- .gitignore 파일 내부에 등록된 패턴과 일치하는 파일들은 git의 관리대상에서 제외된다 
 	- Eclipse 프로젝트를 사용할 떄는 Eclipse 관련 설정 파일들을 등록해두는 것이 좋다
 	 
 # Eclipse Project Files # 
 		.settings/  (/는 폴더라서 /붙이는거임) 
 		*.project
 		*.classpath
 
 
 # unstaged 와 staged의 차이
 	- 가장 최신 커밋 이후로 변화가 있었던 파일들은 모두 (.gitignore에 등록된 것들은 제외 ) 
 	unstaged 상태가 된다 
 	- 모든 변화들 중 (unstaged)중 이번 커밋엣 ㅓ확정짓고 싶은 변화들만 staged 상태로 올린후 커밋을 진행한다 
 	- 즉 , unstaged는 변화는 있었지만 아직 더만들어야 하는 상태이고
 	 staged에 포함시킨 것은 변화가 있었고, 다 만든 상태인 코드들을 말한다  
 
 # branch
 	-하나의 레포지토리를 다양한 상태로 보관하기 위한기능 
 	- Git Repositories - > switch To .. -> New Branch
 	- checkout을 통해 언제든지 원하는 branch로 전환이 가능하다 
 	- brach를 전환하면 커밋되지 않은 작업내용들은 모두 사라진다 
 	
 	main - ㅁ - ㅁ  - ㅁ  -ㅁ 
 						  \ 
 						   ㅁ - ㅁ - ㅁ  - branchA 
 						     	\
 						     	 ㅁ - ㅁ - ㅁ branchB
 						     	 
 						     	 
 #merge 
 	- HEAD(현재 보고있는상태)로 다른 브렌치의 작업내용을 합치는것 
 	- 합칠때 같은부분을 수정한 곳이 있다면 둘중 하나를 선택하는 과정을 거친다  			
 	- Merge 충돌이 해결되지 않으면 다음 커밋을 진행할 수 없다 			    
 
 