package Study;

public class C06_Polymorphism {
	
	/*
	 		# 객체의 다형성
	 		
	 		  - 객체는 다양한 형태를 지닐 수 있다 
	 		  - 사과는 사과이기도 하고 과일이기도 하다 
	 		  - 과일은 과일이지만 사과는 아니다 
	 		  
	 		# 자식 클래스는 부모 클래스가 될수 있다  (업캐스팅)
	 		 - 자식 클래스 타입이 부모 클래스 타입이 되는것을 업캐스팅이라고 한다
	 		 - 업캐스팅된 객체는 자식클래스에만 존재하던 것들을 모두 잊어버린다   
	 		 - 오버라이드된 메서드는 자식 클래스의 것을 유지한다 
	 		 
	 		# 부모 클래스는 자식 클래스가 될수 "없"다! (다운 캐스팅)
	 		- 하지만  예외적으로 업캐스팅되었던 인스턴스는  다시 원래 타입으로의 다운캐스팅이 가능하다  
	 		
	 		
	 */
	public static void main(String[] args) {
		new Food(new PigMeat(),new Vege() , new Balsamic() );
		
		MainMaterial main_mat = new MainMaterial();
		MainMaterial main_mat2 = new Meat();
		
		Meat meat = new Meat();
		// Meat meat2 = new MainMaterial();
		
		
		doSomethingWith(new MainMaterial());
		doSomethingWith(new Fish());
		doSomethingWith(new Meat());
		doSomethingWith(new PigMeat ());
	}
	
	public static void doSomethingWith(MainMaterial mat) {
		
	}
}

class Car{
	Tire tire;
	
	public Car(Tire tire) {
		this.tire = tire;
	}
}

class Tire {}

class TireVer1 extends Tire {}


class Food{
	
	MainMaterial mainMat;
	SubMaterial subMat;
	Sauce sauce;
	
	public Food(MainMaterial mainMat ,SubMaterial subMat ,Sauce sauce) {
		this.mainMat = mainMat;
		this.subMat = subMat;
		this.sauce = sauce;
	}
}

class PorkCutlet extends Food{
	
	public PorkCutlet(PigMeat pig , SubMaterial subMat ,Sauce sauce) {
		super(pig,subMat,sauce);
	}
}


// 제일높은 클래스 (주재료 ,부재료 , 소스 )
class MainMaterial{}
class SubMaterial{}
class Sauce{}

// 주재료를 상속받은 클래스들
class Fish extends MainMaterial {}
class Meat extends MainMaterial {}

// 주재료를 상속받은 클래스를 상속받은 클래스 
class PigMeat extends MainMaterial {}

// 부재료를 상속받은 클래스 
class Vege extends SubMaterial {}
class Fruit extends SubMaterial {}

// 소스를 상속받은 클래스들 
class Salsa extends Sauce{}
class Balsamic extends Sauce{}





